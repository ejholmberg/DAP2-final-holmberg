variables = "SO103",
year = 2015,
survey = "acs5")
age_acs <- tidycensus::get_acs(geography = "county",
state = "MA",
variable = "SO103",
year = 2015,
survey = "acs5")
age_acs <- tidycensus::get_acs(geography = "county",
state = "MA",
variables = "SO103",
year = 2015,
survey = "acs5")
age_acs <- tidycensus::get_acs(geography = "county",
state = "MA",
variables = "SO103",
year = 2015,
survey = "acs5",
show_call = TRUE)
age_acs <- tidycensus::get_acs(geography = "county",
state = "MA",
variables = "S0103",
year = 2015,
survey = "acs5",
show_call = TRUE)
age_acs <- tidycensus::get_acs(geography = "county",
state = "MA",
variables = "S0103_001",
year = 2015,
survey = "acs5",
show_call = TRUE)
age_acs <- tidycensus::get_acs(geography = "state",
state = "MA",
variables = "S0103_001",
year = 2015,
survey = "acs5",
show_call = TRUE)
age_acs <- tidycensus::get_acs(geography = "state",
state = "MA",
variables = "S0103",
year = 2015,
survey = "acs5",
show_call = TRUE)
v15 <- load_variables(2015, "acs5", cache = TRUE)
View(v15)
age_acs <- tidycensus::get_acs(geography = "state",
state = "MA",
variables = c("C27006_010", "C27006_020"),
year = 2015,
survey = "acs5",
show_call = TRUE)
View(age_acs)
age_acs <- tidycensus::get_acs(geography = "county",
state = "MA",
variables = c("C27006_010", "C27006_020"),
year = 2015,
survey = "acs5",
show_call = TRUE)
age_acs <- tidycensus::get_acs(geography = "county",
state = "MA",
variables = c("C27006_010", "C27006_020"),
year = 2015,
survey = "acs5",
show_call = TRUE) |>
group_by(GEOID) |>
mutate(beneficiaries = sum(estimate))
age_acs <- tidycensus::get_acs(geography = "county",
state = "MA",
variables = c("C27006_010", "C27006_020"),
year = 2015:2023,
survey = "acs5") |>
group_by(GEOID) |>
mutate(beneficiaries = sum(estimate))
age_acs <- tidycensus::get_acs(geography = "county",
state = "MA",
variables = c("C27006_010", "C27006_020"),
year = 2015,
survey = "acs5") |>
group_by(GEOID) |>
mutate(beneficiaries = sum(estimate))
process_excel <- function(file_path, sheets) {
combined_df <- tibble()
for (sheet in sheets) {
if (str_detect(sheet, "County")) {
# Extracting date from sheet name
date_str <- str_extract(sheet, "\\d{2}\\.\\d{4}")
if (!is.na(date_str)) {
date_parts <- str_split(date_str, "\\.")[[1]]
month <- date_parts[1]
year <- date_parts[2]
# Read sheet data
df <- read_xlsx(file_path, sheet = sheet, skip = 2) %>%
clean_names() %>%
filter(
if ("state_of_beneficiary" %in% colnames(.)) {
state_of_beneficiary == "MA"
} else if ("state_of_beneficiary_abbreviation" %in% colnames(.)) {
state_of_beneficiary_abbreviation == "MA"
} else if ("state_ofbeneficiaryabbreviation" %in% colnames(.)) {
state_ofbeneficiaryabbreviation == "MA"
} else if ("state_ofbeneficiary" %in% colnames(.)) {
state_ofbeneficiary == "MA"
} else {
FALSE
}
)
if (nrow(df) > 0) {
df <- df %>%
mutate(month = month, year = year)
combined_df <- bind_rows(combined_df, df)
}
}
}
}
# Combining inconsistently named county name columns
combined_df <- combined_df %>%
mutate(county_of_beneficiary = coalesce(county_of_beneficiary, county_of_beneficiary_name)) %>%
select(-county_of_beneficiary_name)
return(combined_df)
}
# Define the file path and sheets
file_path <- "~/Mirror/2024-2025/DAP 2/final/MMEnrolleeStateCountyQtrly092023.xlsx"
sheets <- c("County09.2023", "County06.2023", "County03.2023", "County12.2022", "County09.2022",
"County06.2022", "County03.2022", "County12.2021", "County09.2021", "County06.2021",
"County03.2021", "County12.2020", "County09.2020", "County06.2020", "County03.2020",
"County12.2019", "County09.2019", "County06.2019", "County03.2019", "County12.2018",
"County09.2018", "County06.2018", "County03.2018", "County12.2017", "County09.2017",
"County06.2017", "County03.2017", "County12.2016", "County09.2016", "County06.2016",
"County03.2016", "County12.2015", "County09.2015", "County06.2015")
# Process the Excel file
combined_df <- process_excel(file_path, sheets)
library(janitor)
library(tidyverse)
library(readxl)
library(sf)
# Process the Excel file
combined_df <- process_excel(file_path, sheets)
zippath <- "~/Mirror/2024-2025/DAP 2/final/"
zipF <- paste0(zippath, "counties.zip")
unzip(zipF,exdir=zippath)
MA_county_shape <- st_read(file.path(zippath,
"/COUNTIESSURVEY_POLYM_GENCOAST.shp"))
combined_df_geom <- combined_df |>
mutate(county = str_to_upper(county_of_beneficiary),
total = as.numeric(total)) |>
left_join(MA_county_shape,
join_by(county == COUNTY))
View(combined_df_geom)
library(tidyverse)
library(scales)
# Load data saved from data.R, set filepath as needed in `directory`
directory <- "~/Mirror/2024-2025/DAP 2/final"
data_full <- readRDS(paste0(directory, "/data_full.RData"))
plot2_pre <- data_full |>
filter(date == "2019-12-30") |>
select()
plot2_post <- data_full |>
filter(date == "2023-09-30")
plot2_data <- plot2_pre |>
left_join(plot2_post, join_by(FIPS_STCO), suffix = c("_pre", "_post")) |>
mutate(change = total_msp_per_100k_post - total_msp_per_100k_pre) |>
select(county_of_beneficiary_pre, geometry_pre, change)
rlang::last_trace()
plot2_pre <- data_full |>
filter(date == "2019-12-30")
plot2_data <- plot2_pre |>
left_join(plot2_post, join_by(FIPS_STCO), suffix = c("_pre", "_post")) |>
mutate(change = total_msp_per_100k_post - total_msp_per_100k_pre) |>
select(county_of_beneficiary_pre, geometry_pre, change)
ggplot(plot2_data) +
geom_sf(aes(fill = change, geometry = geometry_pre)) +
scale_fill_distiller(palette = "RdBu", direction = 1, labels = scales::comma) +
theme_void() +
theme(legend.position = "right",
plot.title = element_text(face = "bold", hjust = 0.5)
) +
labs(title = "Change in Medicare Savings Programs\nEnrollment Rates, 2019-2023\n(per 100,000 Medicare beneficiaries)",
fill = "Change in rate\n(per 100,000\nbeneficiaries)",
caption = "Data sources: 5-year ACS (2015-2022) and 1-year ACS (2023), US Census Bureau;\nCMS Quarterly Enrollment Snapshot (06/2015-09/2023)")
ggplot(plot2_data) +
geom_sf(aes(fill = change, geometry = geometry_pre)) +
scale_fill_distiller(palette = "RdBu", direction = 1, labels = scales::comma) +
theme_void() +
theme(legend.position = "right",
plot.title = element_text(face = "bold", hjust = 0.5)
) +
labs(title = "Change in Medicare Savings Programs\nEnrollment Rates, Dec. 2019 - Sep. 2023\n(per 100,000 Medicare beneficiaries)",
fill = "Change in rate\n(per 100,000\nbeneficiaries)",
caption = "Data sources: 5-year ACS (2015-2022) and 1-year ACS (2023), US Census Bureau;\nCMS Quarterly Enrollment Snapshot (06/2015-09/2023)")
ggplot(plot2_data) +
geom_sf(aes(fill = change, geometry = geometry_pre)) +
scale_fill_distiller(palette = "RdBu", direction = 1, labels = scales::comma) +
theme_void() +
theme(legend.position = "right",
plot.title = element_text(face = "bold", hjust = 0.5)
) +
labs(title = "Change in Medicare Savings Programs\nEnrollment Rates, 12/2019 - 92023\n(per 100,000 Medicare beneficiaries)",
fill = "Change in rate\n(per 100,000\nbeneficiaries)",
caption = "Data sources: 5-year ACS (2015-2022) and 1-year ACS (2023), US Census Bureau;\nCMS Quarterly Enrollment Snapshot (06/2015-09/2023)")
ggplot(plot2_data) +
geom_sf(aes(fill = change, geometry = geometry_pre)) +
scale_fill_distiller(palette = "RdBu", direction = 1, labels = scales::comma) +
theme_void() +
theme(legend.position = "right",
plot.title = element_text(face = "bold", hjust = 0.5)
) +
labs(title = "Change in Medicare Savings Programs\nEnrollment Rates, 12/2019 - 9/2023\n(per 100,000 Medicare beneficiaries)",
fill = "Change in rate\n(per 100,000\nbeneficiaries)",
caption = "Data sources: 5-year ACS (2015-2022) and 1-year ACS (2023), US Census Bureau;\nCMS Quarterly Enrollment Snapshot (06/2015-09/2023)")
plot1_data <- data_full |>
group_by(date) |>
summarise(msp_per_100k = (sum(total_msp, na.rm = TRUE)/sum(beneficiaries, na.rm = TRUE))*100000,
qmb_per_100k = (sum(qmb_only+qmb_plus_full_medicaid_benefits, na.rm = TRUE)/sum(beneficiaries, na.rm = TRUE))*100000) |>
mutate(policy_period = if_else(date >= as_date("2020-01-01"), "Post", "Pre"))
setwd("~/Mirror/2024-2025/DAP 2/final/presentation")
ggplot(plot1_data, aes(x = date, y = msp_per_100k, color = policy_period)) +
geom_point(color = "black") +
geom_line() +
geom_vline(xintercept = as_date("2020-01-01"), linetype = "dotted", color = "red") +
geom_label(aes(x = as_date("2018-03-01"), y = 29500, label = "Eligibility change"), size = 3.5, label.size = 0.5, color = "black", fill = "white") +
geom_segment(aes(x = as_date("2019-04-01"), y = 29500, xend = as_date("2019-11-01"), yend = 29500),
arrow = arrow(length = unit(0.2, "cm")), color = "black") +
scale_y_continuous(limits = c(20000, 30000), labels = scales::comma) +
scale_color_brewer(palette = "Pastel2") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5)
) +
labs(
x = "Year",
y = "Enrollment rate\n(per 100,000 Medicare beneficiaries)",
title = "Massachusetts Medicare Savings Programs\nQuarterly Enrollment Rates, 2015-2023",
caption = "Data sources: 5-year ACS (2015-2022) and 1-year ACS (2023), US Census Bureau;\nCMS Quarterly Enrollment Snapshot (06/2015-09/2023)"
)
ggplot(plot1_data, aes(x = date, y = msp_per_100k, color = policy_period)) +
geom_point(color = "black") +
geom_line() +
geom_vline(xintercept = as_date("2020-01-01"), linetype = "dotted", color = "red") +
geom_label(aes(x = as_date("2018-03-01"), y = 29500, label = "Eligibility change"), size = 3.5, label.size = 0.5, color = "black", fill = "white") +
geom_segment(aes(x = as_date("2019-04-01"), y = 29500, xend = as_date("2019-11-01"), yend = 29500),
arrow = arrow(length = unit(0.2, "cm")), color = "black") +
scale_y_continuous(limits = c(20000, 30000), labels = scales::comma) +
scale_color_brewer(palette = "Pastel2") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5)
) +
labs(
x = "Year",
y = "Enrollment rate\n(per 100,000 Medicare beneficiaries)",
title = "Massachusetts Medicare Savings Programs\nQuarterly Enrollment Rates, 2015-2023",
caption = "Data sources: 5-year ACS (2015-2022) and 1-year ACS (2023), US Census Bureau;\nCMS Quarterly Enrollment Snapshot (06/2015-09/2023)"
) +
ggsave(filename="plot1_enrollment_plot.png",
dpi = 320,
width = 6,
height =4)
ggsave(p,
filename="plot1_enrollment_plot.png",
dpi = 320,
width = 6,
height =4)
p <- ggplot(plot1_data, aes(x = date, y = msp_per_100k, color = policy_period)) +
geom_point(color = "black") +
geom_line() +
geom_vline(xintercept = as_date("2020-01-01"), linetype = "dotted", color = "red") +
geom_label(aes(x = as_date("2018-03-01"), y = 29500, label = "Eligibility change"), size = 3.5, label.size = 0.5, color = "black", fill = "white") +
geom_segment(aes(x = as_date("2019-04-01"), y = 29500, xend = as_date("2019-11-01"), yend = 29500),
arrow = arrow(length = unit(0.2, "cm")), color = "black") +
scale_y_continuous(limits = c(20000, 30000), labels = scales::comma) +
scale_color_brewer(palette = "Pastel2") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5)
) +
labs(
x = "Year",
y = "Enrollment rate\n(per 100,000 Medicare beneficiaries)",
title = "Massachusetts Medicare Savings Programs\nQuarterly Enrollment Rates, 2015-2023",
caption = "Data sources: 5-year ACS (2015-2022) and 1-year ACS (2023), US Census Bureau;\nCMS Quarterly Enrollment Snapshot (06/2015-09/2023)"
)
ggsave(p,
filename="plot1_enrollment_plot.png",
dpi = 320,
width = 6,
height =4)
p <- ggplot(plot2_data) +
geom_sf(aes(fill = change, geometry = geometry_pre)) +
scale_fill_distiller(palette = "RdBu", direction = 1, labels = scales::comma) +
theme_void() +
theme(legend.position = "right",
plot.title = element_text(face = "bold", hjust = 0.5)
) +
labs(title = "Change in Medicare Savings Programs\nEnrollment Rates, 12/2019 - 9/2023\n(per 100,000 Medicare beneficiaries)",
fill = "Change in rate\n(per 100,000\nbeneficiaries)",
caption = "Data sources: 5-year ACS (2015-2022) and 1-year ACS (2023), US Census Bureau;\nCMS Quarterly Enrollment Snapshot (06/2015-09/2023)")
ggsave(p,
filename="plot2_enrollment_map.png",
dpi = 320,
width = 6,
height = 4)
data <- data_full
counties <- unique(data$county_of_beneficiary)
msp_vars <- c("All MSPs" = "total_msp_per_100k",
"QMB" = "total_qmb_per_100k",
"SLMB" = "total_slmb_per_100k",
"QI" = "total_qi_per_100k")
ui <- page_sidebar(
theme = bs_theme(bootswatch = "united"),
title = "Massachusetts Medicare Savings Programs (MSP)\nQuarterly Enrollment Rates",
sidebar = sidebar(
title = "Select a County and Program",
selectInput(
"county",
"County:",
choices = counties
),
selectInput(
"variable",
"Program:",
choices = msp_vars
)
),
card(
plotlyOutput("timeSeriesPlot")
)
)
server <- function(input, output) {
output$timeSeriesPlot <- renderPlotly({
# Filter data for selected county
filtered_data <- data %>%
filter(county_of_beneficiary == input$county) |>
arrange(date)
# Get user-friendly name for plot title
user_name <- names(msp_vars)[msp_vars == input$variable]
# Create time series plot
p <- ggplot(filtered_data, aes(x = date, y = .data[[input$variable]], group = 1,
text = paste0("Date: ", format(date, "%b %Y"), "\nRate: ",
round(.data[[input$variable]], 1)))) +
geom_line(linewidth = 1) +
geom_point() +
scale_y_continuous(labels = scales::comma,
expand = expansion(mult = c(0.5, 0.5))) +
theme_minimal() +
labs(
x = "Year",
y = "Enrollment rate\n(per 100,000 Medicare beneficiaries)",
title = paste("Enrollment Rates for", user_name, "\nin", input$county, "County")
) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
ggplotly(p, tooltip = "text") %>%
layout(hoverlabel = list(bgcolor = "white"))
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
library(bslib)
library(plotly)
ui <- page_sidebar(
theme = bs_theme(bootswatch = "united"),
title = "Massachusetts Medicare Savings Programs (MSP)\nQuarterly Enrollment Rates",
sidebar = sidebar(
title = "Select a County and Program",
selectInput(
"county",
"County:",
choices = counties
),
selectInput(
"variable",
"Program:",
choices = msp_vars
)
),
card(
plotlyOutput("timeSeriesPlot")
)
)
server <- function(input, output) {
output$timeSeriesPlot <- renderPlotly({
# Filter data for selected county
filtered_data <- data %>%
filter(county_of_beneficiary == input$county) |>
arrange(date)
# Get user-friendly name for plot title
user_name <- names(msp_vars)[msp_vars == input$variable]
# Create time series plot
p <- ggplot(filtered_data, aes(x = date, y = .data[[input$variable]], group = 1,
text = paste0("Date: ", format(date, "%b %Y"), "\nRate: ",
round(.data[[input$variable]], 1)))) +
geom_line(linewidth = 1) +
geom_point() +
scale_y_continuous(labels = scales::comma,
expand = expansion(mult = c(0.5, 0.5))) +
theme_minimal() +
labs(
x = "Year",
y = "Enrollment rate\n(per 100,000 Medicare beneficiaries)",
title = paste("Enrollment Rates for", user_name, "\nin", input$county, "County")
) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
ggplotly(p, tooltip = "text") %>%
layout(hoverlabel = list(bgcolor = "white"))
})
}
shinyApp(ui, server)
eligibility_info <- list(
"total_qmb_per_100k" = "Income eligibility for QMB is < 190% FPL.",
"total_slmb_per_100k" = "Income eligibility for SLMB is 190-210% FPL.",
"total_qi_per_100k" = "Income eligibility for QI is 210-225% FPL.",
"total_msp_per_100k" = "Income must be under 225% FPL to qualify for MSPs ($2,844/mo for an individual; $3,853/mo for a couple)."
)
ui <- page_sidebar(
theme = bs_theme(bootswatch = "united"),
title = "Massachusetts Medicare Savings Programs (MSP)\nQuarterly Enrollment Rates",
sidebar = sidebar(
title = "Select a County and Program",
selectInput(
"county",
"County:",
choices = counties
),
selectInput(
"variable",
"Program:",
choices = msp_vars
),
tags$hr(),
tags$div(
style = "padding: 10px 0;",
textOutput("eligibility_text")
)
),
card(
plotlyOutput("timeSeriesPlot")
)
)
server <- function(input, output) {
output$eligibility_text <- renderText({
eligibility_info[[input$variable]]
})
output$timeSeriesPlot <- renderPlotly({
# Filter data for selected county
filtered_data <- data %>%
filter(county_of_beneficiary == input$county) |>
arrange(date)
# Get user-friendly name for plot title
user_name <- names(msp_vars)[msp_vars == input$variable]
# Create time series plot
p <- ggplot(filtered_data, aes(x = date, y = .data[[input$variable]], group = 1,
text = paste0("Date: ", format(date, "%b %Y"), "\nRate: ",
round(.data[[input$variable]], 1)))) +
geom_line(linewidth = 1) +
geom_point() +
scale_y_continuous(labels = scales::comma,
expand = expansion(mult = c(0.5, 0.5))) +
theme_minimal() +
labs(
x = "Year",
y = "Enrollment rate\n(per 100,000 Medicare beneficiaries)",
title = paste("Enrollment Rates for", user_name, "\nin", input$county, "County")
) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
ggplotly(p, tooltip = "text") %>%
layout(hoverlabel = list(bgcolor = "white"))
})
}
shinyApp(ui, server)
?stargazer
library(stargazer)
?stargazer
stargazer(lm(total_msp_per_100k ~ nw + pop + ps1, data = model), type = "html")
model <- data_full |>
mutate(ps1 = if_else(year>=2020, 1, 0),
pop = total_pop/100000) |>
rename(nw = nonwhite_percent)
stargazer(lm(total_msp_per_100k ~ nw + pop + ps1, data = model), type = "html")
stargazer(lm(total_msp_per_100k ~ nw + pop + ps1, data = model), type = "latex")
stargazer(lm(total_msp_per_100k ~ nw + pop + ps1, data = model), type = "latex")
stargazer(lm(total_msp_per_100k ~ nw + pop + ps1, data = model), type = "latex") |>
View()
stargazer(lm(total_msp_per_100k ~ nw + pop + ps1, data = model), type = "latex") |>
print()
## R Markdown
$$
## R Markdown
$
## R Markdown
$$
stargazer(lm(total_msp_per_100k ~ nw + pop + ps1, data = model), type = "text")
stargazer(lm(total_msp_per_100k ~ nw + pop + ps1, data = model), type = "html",
font.size="tiny",
single.row = T)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
